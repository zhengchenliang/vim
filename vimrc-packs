" Forked from David Chen

" === Auto load for first time uses -> I don't install plugins here
"  if empty(glob('~/.vim/autoload/plug.vim'))
"    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
"      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
"  endif

" load /pack/*/opt packages at vim start
" see :help packages
"  packadd! onedark.vim " it may has other prerequisites like atom color interpreter so forget it
" nvim for full configuration, vim for only plain

" === Vundle Installation
" https://github.com/VundleVim/Vundle.vim
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set nocompatible " required
filetype off " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim' " Vundle required
Plugin 'godlygeek/tabular' " MD required
Plugin 'preservim/vim-markdown' " MD
" HTML preface
Plugin 'turbio/bracey.vim', {'do': 'npm install --prefix server'}

call vundle#end() " :PluginInstall
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update = :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve

" === System
filetype indent on " indent for file type on
set indentexpr= " no indent here -> use spaces
filetype plugin on " plugin for file type on
filetype plugin indent on " indent in plugin for file type on
set mouse=a " use mouse
set clipboard=unnamed " use system clipboard
set encoding=utf-8 " use fixed encoding
colorscheme habamax " use vim color scheme

" Prevent incorrect background rendering
let &t_ut=''

" === Main code display
set number
"  set relativenumber
set ruler
set cursorline
syntax enable
syntax on
"  colorscheme onedark " use onedark scheme
highlight VerticalBar ctermfg=cyan
match VerticalBar /\v\|/
"  fps display
function! FPS2display()
  let line1 = getline(1)
  let parts1 = split(line1, '|')
  let partn1 = len(parts1)
  if partn1 < 2
    return
  endif
  let cursor0 = getpos('.')
  if cursor0[1] == 1
    echo
    return
  endif
  let line0 = getline('.')
  let parts0 = split(line0, '|')
  let partn0 = len(parts0)
  if partn0 != partn1 - 2
    echo parts1[-1] . " #" . (getpos('.')[1] - 1) . " | ignored"
    return
  endif
  let cursor_sect = 0
  for part0 in parts0
    let cursor_sect += 1
    if cursor0[2] < strlen(part0) + 2
      echo parts1[-1] . " #" . (cursor0[1] - 1) . " " . parts1[cursor_sect - 1]
      return
    endif
    let cursor0[2] -= strlen(part0) + 1
  endfor
  echo parts1[-1] . " not found"
endfunction
"  fps display at cursor move
augroup FPS2display0
  autocmd CursorMoved * call FPS2display()
augroup END
" highlights
highlight Quest ctermfg=yellow
call matchadd("Quest", "?")
highlight Excla ctermfg=red
call matchadd("Excla", "!")

" === Editor behavior
" Better tab
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set list
set listchars=tab:▸\ ,trail:▫
set scrolloff=5

" Prevent auto line split
set wrap
set tw=0

" Better backspace
set backspace=indent,eol,start
set foldmethod=indent
set foldlevel=99
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" === Window behaviors
set splitright
set splitbelow

" === Status/command bar
set laststatus=2
set autochdir
set showcmd
set formatoptions-=tc

" Set tab autocomplete style
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu
set wildmode=longest,list,full

" Searching options
set hlsearch
exec "nohlsearch"
set incsearch
set ignorecase
set smartcase

" === Restore Cursor Position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" === Basic Mappings
"  VITAL <LEADER> Leader key: Set <LEADER> as <SPACE>
let mapleader=" "

" Column (:) mods
map ; :
map q; q:
map <LEADER>/ :!
map <LEADER>r :r !
map <LEADER>sr :%s/

"  VITAL <CR> = Ctrl+M = <Return> = <Enter> Change line key
" Save & quit
map Q :q<CR>
map W :w<CR>

" Open the vimrc file anytime
"  map <LEADER>rc :e ~/.vim/vimrc<CR>

" Redo operations
noremap y <C-r>
" Undo in Insert mode
"  inoremap <C-l> <C-u>

" VITAL a = add; s = insert;
noremap s i
noremap S I
" VITAL press f to copy and press h to paste
noremap f y
noremap h p
" VITAL vim script func: copy and paste with the system clipboard
func! CopyCurrentLine()
  call system('echo -n ' . shellescape(getline('.')) . ' | xclip -selection clipboard')
endfunc
nnoremap <C-c> :call CopyCurrentLine()<CR><CR>
function! CopyVisualSelection()
  try
    " Save the current content of register a
    let a_save = @a
    " Select the visual region and copy it to register a
    normal! gv"ay
    " Get the content of register a
    let selection = @a
    " Copy the content to the system clipboard using xclip
    call system('echo -n ' . shellescape(selection) . ' | xclip -selection clipboard')
  finally
    " Restore the previous content of register a
    let @a = a_save
  endtry
endfunction
vnoremap <C-c> :call CopyVisualSelection()<CR><CR>
func! PasteFromXclip()
  let lin = line(".")
  exec lin . "r !xclip -o -sel clip"
endfunc
noremap <C-v> :call PasteFromXclip()<CR><CR>
" Poor vim cannot distinguish Ctrl and Ctrl + Shift
" Must use Ctrl + Shift + v to paste at cursor at insert mode
"inoremap <C-v> <C-S-v>
nnoremap vb <C-v>

" Search
map <LEADER><CR> :nohlsearch<CR>
noremap = nzz
noremap - Nzz

" Duplicate words
map <LEADER>fd /\(\<\w\+\>\)\_s*\1

" === Cursor Movement
"     ^
"     i
" < j k l >
"     v
noremap i k
noremap j h
noremap k j
" I/K keys for multitimes i/k (faster navigation)
noremap I 5k
noremap J 5h
noremap K 5j
noremap L 5l
" D key: go to the start of the line
noremap D 0
" F key: go to the end of the line
noremap F $

" Faster in-line navigation by words
noremap p w
noremap o b
noremap P 5w
noremap O 5b

" Ctrl + i or k will move up/down the view port without moving the cursor
noremap <C-i> 5<C-y>
noremap <C-k> 5<C-e>
inoremap <C-i> <Esc>5<C-y>a
inoremap <C-k> <Esc>5<C-e>a

" === Window management
" Use <space> + new arrow keys for moving the cursor around windows
map <LEADER>n <C-w>w
map <LEADER>i <C-w>k
map <LEADER>k <C-w>j
map <LEADER>j <C-w>h
map <LEADER>l <C-w>l
"map <LEADER>r <C-w>r

" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)
map gi :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>
map gk :set splitbelow<CR>:split<CR>
map gj :set nosplitright<CR>:vsplit<CR>:set splitright<CR>
map gl :set splitright<CR>:vsplit<CR>

" Place the two screens up and down
noremap gu <C-w>t<C-w>K
" Place the two screens side by side
noremap gh <C-w>t<C-w>H

" Rotate screens
noremap gfu <C-w>b<C-w>K
noremap gfh <C-w>b<C-w>H

" Resize splits with arrow keys
"  map <up> :res +5<CR>
"  map <down> :res -5<CR>
"  map <left> :vertical resize-5<CR>
"  map <right> :vertical resize+5<CR>

" === Tabe management
" Create a new tabe
map tn :tabe<CR>
" Move around tabes with tj and tl
map tj :-tabnext<CR>
map tl :+tabnext<CR>
" Move the tabes with tk and ti
map tk :-tabmove<CR>
map ti :+tabmove<CR>

" === Other useful stuff
" Press space twice to jump to the next '<++>' and edit it
"  map <LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>c4i

" Spelling Check with <space>sc
map <LEADER>sc :set spell!<CR>
noremap <C-x> ea<C-x>s
inoremap <C-x> <Esc>ea<C-x>s

" Press ` to change case (instead of ~)
map ` ~
" n key: go to the prev for /
noremap n N
" m key: go to the next for /
noremap m n

" Auto change directory to current dir
autocmd BufEnter * silent! lcd %:p:h

" Call figlet
map tx :r !figlet

" Compile function
map rn :call CompileRunGcc()<CR>
func! CompileRunGcc()
  exec "w"
  if &filetype == 'c'
    exec "!g++ % -o %<"
    exec "!time ./%<"
  elseif &filetype == 'cc'
    exec "!g++ % -o %<"
    exec "!time ./%<"
  elseif &filetype == 'cpp'
    exec "!g++ % -o %<"
    exec "!time ./%<"
  elseif &filetype == 'java'
    exec "!javac %"
    exec "!time java %<"
  elseif &filetype == 'sh'
    :!time bash %
  elseif &filetype == 'python'
    silent! exec "!clear"
    exec "!time python3 %"
  elseif &filetype == 'html'
    exec "!firefox % &"
  elseif &filetype == 'markdown'
    exec "MarkdownPreview"
  elseif &filetype == 'vimwiki'
    exec "MarkdownPreview"
  endif
endfunc

map bd :call CompileBuildrrr()<CR>
func! CompileBuildrrr()
  exec "w"
  if &filetype == 'vim'
    exec "source $MYVIMRC"
  elseif &filetype == 'markdown'
    exec "echo"
  endif
endfunc

" Vim Plug Installation
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin()
" Pretty dress
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'bling/vim-bufferline'
" Nerd tree
Plug 'preservim/nerdtree'
" Undo tree
Plug 'mbbill/undotree'
" Tag bar
Plug 'universal-ctags/ctags' " build via http://github.com/universal-ctags/ctags
Plug 'preservim/tagbar'
" Auto complete
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Markdown preview
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for' :['markdown', 'vim-plug'] }

call plug#end() " :PlugInstall
" :PlugUpdate to update plugs
" :PlugDiff to diff plugs
" :PlugClean to clean unused plugs

nnoremap jf :bprev<CR>
nnoremap lf :bnext<CR>
nnoremap kf :bd<CR>

" Plug.Airline
let g:airline#extensions#tabline#enabled = 0
let g:airline_theme='deus'

" Plug.Nerdtree
nnoremap ef :NERDTree<CR>
nnoremap wf :NERDTreeClose<CR>
" Start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
" Exit Vim if NERDTree is the only window remaining in the only tab.
"autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" Close the tab if NERDTree is the only window remaining in it.
"autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if winnr() == winnr('h') && bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
  \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" Plug.Undotree
nnoremap qf :UndotreeToggle<CR>

" Plug.Tagbar
let g:tagbar_ctags_bin = "~/.vim/plugged/ctags/ctags"
" https://github.com/universal-ctags/ctags
" cd ~/.vim/plugged/ctags; ./autogen.sh; ./configure; make; make install
nnoremap if :Tagbar<CR>

" Plug.MarkdownPreview
" pacman -S nodejs yarn
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 1
let g:mkdp_refresh_slow = 0
let g:mkdp_command_for_global = 0
let g:mkdp_open_to_the_world = 0
let g:mkdp_open_ip = ''
let g:mkdp_browser = ''
let g:mkdp_echo_preview_url = 0
function OpenNew (url)
  execute "! firefox --new-window " . a:url
endfunction
let g:mkdp_browserfunc = 'OpenNew'
let g:mkdp_preview_options = {
  \ 'mkit': {},
  \ 'katex': {},
  \ 'uml': {},
  \ 'maid': {},
  \ 'disable_sync_scroll': 0,
  \ 'sync_scroll_type': 'middle',
  \ 'hide_yaml_meta': 1,
  \ 'sequence_diagrams': {},
  \ 'flowchart_diagrams': {},
  \ 'content_editable': v:false,
  \ 'disable_filename': 0,
  \ 'toc': {}
  \ }
let g:mkdp_markdown_css = ''
let g:mkdp_highlight_css = ''
let g:mkdp_port = ''
let g:mkdp_page_title = '「${name}」'
let g:mkdp_filetypes = ['markdown']
let g:mkdp_theme = 'dark'
nmap pv :MarkdownPreview<CR>

" Plug.HTMLpreface
" cd ~/.vim/bundle/bracey.vim; npm install --prefix server
let g:bracey_browser_command = 'firefox --new-window'
let g:bracey_auto_start_browser = 1
let g:bracey_refresh_on_save = 1
let g:bracey_eval_on_save = 1
let g:bracey_auto_start_server = 1
let g:bracey_server_allow_remote_connections = 0
let g:bracey_server_log = '/dev/null'
nmap pf :Bracey<CR><CR>
